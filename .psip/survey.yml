survey:
   name: Scientific Software Excellence Assessment
   description: A tool that allows developers to assess their progress towards sustainable and quality code using software engineering best practices.

   scores:
    - name: None
      boost: Can you do better?
      value: 0
      color: "#000000"
    - name: Basic
      boost: Good start!
      value: 33
      color: "#DC267F"
    - name: Intermediate
      boost: Keep up the good work!
      value: 66
      color: "#FFB000"
    - name: Advanced
      boost: Awesome!
      value: 100
      color: "#066999"
    
   categories:
    - name: Originality
      path: originality
      description: This section examines the extent to which the software project makes an important and innovative contribution to understanding and knowledge in the field.  
      items:
       - name: Novelty
         path: novelty
         description: How would you rate the novelty of the algorithm (innovation)?
         questions:
          - There is no novelty or the novelty is unknown
          - An incremental improvement over existing algorithms
          - A breakthrough compared with existing algorithms
          - A transformative change compared with existing algorithms
       - name: Impact
         path: impact
         description: How would you rate the impact on research methods?
         questions: 
          - There is no impact or the impact is unknown
          - An incremental improvement on existing research methods
          - A breakthrough compared with existing research methods
          - A transformative change compared with existing research methods
       - name: Originality
         path: originality
         description: How would you rate the originality of the solution (inventive)?
         questions:
          - The solution is not original or the originality is unknown
          - Contains some original aspects
          - Contains many original aspects
          - Is a wholely original solution
       - name: Engagement
         path: engagement
         description: How would you rate the engagement with forms or scales of data?
         questions:
          - Does not engage with data or this is unknown
          - Incremental improvement
          - Breakthrough improvement
          - Transformative change
       - name: Capability
         path: capability
         description: How would you rate the improvement in the scale, resolution, or accuracy at which research can be performed?
         questions:
          - Does not improve capability or this is unknown
          - Incremental improvement
          - Breakthrough improvement
          - Transformative change
       - name: Intellectual Property
         path: intellectual_property
         description: Is the software covered by any patents? How many?
         questions:
          - The software is not patentable
          - No patents
          - One patent
          - More than one patents

    - name: Significance
      path: significance
      description: This section examines the extent to which the software project has influenced, or has the capacity to influence, knowledge and scholarly thought, or the development and understanding of policy and/or practice.
      items:
       - name: Advancement
         path: advancement
         description: How would you rate the ability of the software to enable or accelerate research advances?
         questions:
          - None/Unknown
          - Accelerates some research advances
          - Accelerates a moderate number of research advances
          - Accelerates a significant number of research advances
          
       - name: Enablement
         path: enablement
         description: How would you rate the ability of the software to enable research or thinking that was not previously possible?
         questions:
          - None/Unknown
          - Enables some research
          - Enables a moderate amount of research
          - Enables a significant amount of research

       - name: Influence
         path: influence
         description: How would you rate the ability of the software to software influence policy, practice, or users/audiences?
         questions:
          - None/Unknown
          - Has somewhat of an influence
          - Has a moderate influence
          - Has a significant influence

       - name: Diversity
         path: diversity
         description: To what extent is the software being used across a diverse range of disciplines?
         questions:
          - None/Unknown
          - Only a single discipline
          - More than one disciplines
          - Broadly across many disciplines

       - name: User Community
         path: user_community
         description: What would you estimate is the user community size for the software?
         questions:
          - None/Unknown
          - Small community - O(1)
          - Medium community - O(10)
          - Large community - O(100)+

       - name: Developer Community
         path: developer_community
         description: What would you estimate is the developer community size for the software?
         questions:
          - None/Unknown
          - Small community - O(1)
          - Medium community - O(10)
          - Large community - O(100)+
          
       - name: Sustainability
         path: sustainability
         description: What is the level of funding sustainability?
         questions:
          - Exploratory/Unfunded
          - Single funding source
          - Multiple funding sources
          - Community supported with ongoing funding
       
       - name: Publication Citations
         path: publication_citations
         description: What is the number of publication citations for the software?
         questions:
          - None/Unknown
          - Cited a small number of times - O(1)
          - Cited a medium number of times - O(10)
          - Cited a significant number of times - O(100)+
       
       - name: Dependency
         path: dependency
         description: What is the number of times the software is listed as a dependency, is extended, or is used by other software?
         questions:
          - None/Unknown
          - Used a small number of times - O(1)
          - Used a medium number of times - O(10)
          - Used a significant number of times - O(100)+
       
       - name: Criticality Score
         path: criticality_score
         description: What is the software's criticality score?
         questions:
          - Unknown
          - Less than 0.4
          - In the range 0.4 to 0.8
          - Greater than 0.8
       
       - name: User Satisfaction
         path: user_satisfaction
         description: What is the user satisfaction rating for the software?
         questions:
          - Unknown
          - Users are unhappy
          - Users are generally happy
          - Users are very satisfied
          
       - name: Sponsor Satisfaction
         path: sponsor_satisfaction
         description: What is the sponsor satisfaction rating for the software?
         questions:
          - Unknown
          - Sponsors are unhappy
          - Sponsors are generally happy
          - Sponsors are very satisfied


    - name: Maturity
      path: maturity
      description: Improving strategies for writing scientific software that is efficient, scalable, and portable—from laptops to emerging extreme-scale 
       architectures—while preserving other code quality metrics such as correctness and usability.

      items:
       - name: Code Standards
         path: code_standards
         description: To what extent does the software have clearly defined coding standards and guidelines?
         questions:
          - No/ad-hoc coding standards
          - Coding standards are encouraged
          - Coding standards have been clearly documented
          - Coding standards are enforced
       - name: Code Analysis Tools
         path: code_analysis_tools
         description: What type of code analysis tools are regularly used on the software?
         questions:
          - Code analysis tools are not used
          - Basic static analysis (e.g. linting)
          - Basic and advanced static analysis (e.g. quality, security)
          - Dynamic and static analysis
       - name: Programming Paradigm
         path: code_programming_paradigm
         description: What type of programming paradigm is used by the software?
         questions:
          - No specific paradigm/unstructured
          - Code must be procedural
          - Code is encouraged to follow object oriented design principles
          - Code must follow object oriented design principles
       - name: Code Reuse
         path: code_reuse
         description: What is the reuse readiness level of the code?
         questions:
          - Not reusable
          - May be reusable at a high cost
          - Reusable at some cost
          - Proved/demonstrated reusability          
       - name: Code Complexity
         path: code_complexity
         description: What is the highest [cylomatic complexity](https://doi.org/10.6028/NIST.SP.500-235) reported by a [tool](https://marketplace.visualstudio.com/items?itemName=selcuk-usta.code-complexity-report-generator)?
         questions:
          - Unknown/not calculated
          - Low (< 5)
          - Medium (5 - 10)
          - High (> 10)
          
       - name: Developer Documentation
         path: doc_developer
         description: How would you describe the documentation available for a developer to understand how the software works?
         questions:
          - No documentation
          - Ad-hoc documentation
          - Partial documentation and/or under development
          - Clear, concise and complete documenation     
       - name: User Documentation
         path: doc_user
         description: How would you describe the user documentation that describes how to run/use the software?
         questions:
          - No documentation
          - Ad-hoc documentation
          - Partial documentation and/or under development
          - Clear, concise and complete documenation
       - name: Contribution Guidelines
         path: doc_contribution
         description: How would you describe the contribution guidelines documentation?
         questions:
          - No documentation
          - Ad-hoc documentation
          - Partial documentation and/or under development
          - Clear, concise and complete documenation          
       - name: Documentation Management
         path: doc_management
         description: How is the documentation managed?
         questions:
          - No documentation management
          - Kept in a known location
          - Some documenation under revision control
          - All documentation under revision control     

       - name: Development Methodology
         path: process_methodology
         description: What type of *documented* software development methodology is used?
         questions:
          - None/not documented
          - Simple, sequential process
          - Iterative process
          - Agile process
       - name: Maturity Assessment
         path: process_assessment
         description: How often are the maturity criteria of the software assessed?
         questions:
          - Never/not assessed
          - Occasionally
          - On a regular basis
          - On a continous basis
       - name: Requirements Gathering
         path: process_requirements
         description: What requirements gathering process is used?
         questions:
          - None/not collected
          - Ad-hoc/as needed
          - Requirements gathered at the start of the project
          - Functional and non-functional requirements gathered and documented iteratively
       - name: Software Design
         path: process_design
         description: When is the software design captured and documented?
         questions:
          - An ad-hoc design process is used
          - After development is completed
          - Prior to development commencing
          - As part of an agile development process
       - name: Code Reviews
         path: process_reviews
         description: What are the code review requirements?
         questions:
          - Code reviews are not used
          - Ad-hoc code reviews
          - Code contribuitions are reviewed but the process is not documented	
          - A documented process is followed for every code contribution
       - name: Testing Strategy
         path: process_testing
         description: Is there a documented test strategy?
         questions:
          - No documented strategy
          - Testing is not documented and done on an ad-hoc/as needed basis
          - The testing strategy is partially documented
          - The testing strategy is fully documented
       - name: On/Off-Boarding
         path: process_onoffboarding
         description: Is there a documented on-boarding/off-boarding process?
         questions:
          - None/not documented
          - Done on an ad-hoc basis
          - Partially documented
          - Fully docuemented
       - name: Process Document Control
         path: process_documents
         description: Are the project process documents under revision control?
         questions:
          - None/not documented
          - Documents are kept in a known location
          - Partially under revision control
          - Fully under revision control
       - name: Work Tracking
         path: process_tracking
         description: How is work on the project tracked and managed?
         questions:
          - None/not tracked
          - Using ad-hoc methods
          - Using an issue tracking system (e.g. GitLab)
          - Dedicated project management system (e.g. IBM CLM)
          
       - name: Performance Testing
         path: performance_testing
         description: Do you test your software to determine the speed, scalability, reliability, and stability under a variety of workloads?
         questions:
          - Not currently being used
          - Conduct performance tests
          - Automated performance tests are run regularly
          - Use performance profiling tools to guide performance-related improvements
       - name: Performance Regression Testing
         path: performance_regression_testing
         description: Do you undertaking testing that exercises performance capabilities combined with plans for how to make practical use of 
          that performance data?
         questions:
          - Not currently being used
          - A testable primary use case and set of measurements are established
          - The performance history of the tests are tracked over time
          - Performance tracking is run and reviewed at regular intervals on relevant platforms 
       - name: Performance Portability
         path: performance_portability
         description: Does the software exhibiting similar performance across multiple platforms, with the time to solution 
          reflecting efficient utilization of computational resources on each platform?
         questions:
          - Not currently being used
          - Utilize a standard parallel programming model (e.g. MPI)
          - Utilize a programming model designed for portability (e.g. OpenACC, OpenMP)
          - Re-writing the application to utilize an advanced portability library (e.g. Kokkos)
       - name: Resource Optimization
         path: performance_resources
         description: Does the software optimize various aspects of resource usage eg. network bandwidth, memory footprint, latency, etc?
         questions:
          - Not considered
          - Some aspects have been considered for optimization
          - Optimization of most apsects has been undertaken
          - All relevent aspects have been optimized
       - name: Time to Solution
         path: performance_timetosolution
         description: For a given problem, does the time to solution meet the software's target?
         questions:
          - Not considered/measured
          - Working towards meeting targets
          - Meets targets for some problems
          - Meets or exceeds time to solution targets

       - name: Test Suite
         path: testing_suite
         description: How would you best describe the test suite?
         questions:
          - No testing undertaken
          - Manual/ad-hoc tests
          - Combination of manual and automated tests
          - Fully automated tests
       - name: Test Types
         path: testing_types
         description: What types of tests does the software have?
         questions:
          - No testing undertaken
          - Combination of unit/integration/system tests
          - Regression testing
          - Verification/validation
       - name: Test Coverage
         path: testing_coverage
         description: What is the testing code coverage?
         questions:
          - No testing undertaken
          - '< 50%'
          - '50% - 80%'
          - '> 80%'
       - name: Continuous Integration
         path: testing_ci
         description: To what extent is continuous integration used?
         questions:
          - Not used
          - Code is automatically built
          - Automated tests run when code is merged
          - Code can only be merged if automated tests have successfully run
       - name: Testing Policy
         path: testing_policy
         description: Is there a test policy for code contribution?
         questions:
          - Not used
          - Tests are sometimes provided but not required
          - Tests are only required for certain changes
          - Tests are required for every new feature
       - name: Test Development
         path: testing_development
         description: When are tests developed?
         questions:
          - Not used
          - Implementation is done first and then tests are written
          - Tests and implementation are done at roughly the same time	
          - Before requirements are implemented (TDD)

       - name: Security Assessment
         path: security_assessment
         description: When do you assess security and address security-related issues in the software?
         questions:
          - Security is not assessed
          - On an ad-hoc basis or when incidents occur
          - At the start of the design/development
          - As part of the software development lifecycle
       - name: Security Principles
         path: security_principles
         description: Does the software implement secure design principles?
         questions:
          - Security is not considered
          - When issues are observed
          - During implementation
          - As part of the design process
       - name: Security Reviews
         path: security_reviews
         description: When do you perform security reviews of the software?
         questions:
          - Security is not reviewed
          - When a vulnerability is discovered
          - On a regular but infrequent basis
          - As part of the software development lifecycle
          
    - name: Reproducibility
      path: reproducibility
      description: Improving methods of testing and verification to ensure that software is robust and produces reliable results, thereby 
       helping to ensure the integrity of research and enable collaboration across teams.

      items:
       - name: Release Strategy
         path: release_strategy
         description: How do you identify releases of the software?
         questions:
          - None
          - Use version numbers
          - Version numbers plus tags
          - Create DOI for every release
       - name: Open Science Platform
         path: open_science_platform
         description: Has the software been submitted to an open science platform (e.g. DOE Code)?
         questions:
          - Not submittied
          - Software is proprietary/restricted
          - Yes, but for listing only
          - Yes         
       - name: License
         path: license
         description: Does the software have an OSI approved license?
         questions:
          - No/default license
          - Software is proprietary/restricted
          - Open source but not OSI approved
          - Yes
       - name: Repository Type
         path: repository_type
         description: What type of repository is the software available from?
         questions:
          - None/private repository
          - Software made available on request
          - Privately run open repository
          - Public open source repository
       - name: Accessibility
         path: accessibility
         description: Are there requirements for accessing the issue tracker?
         questions:
          - No external access
          - Registration process to allow access for approved users
          - Creation of issues requires authorization
          - Reading and creation of issues without authorization
       - name: Certification
         path: certification
         description: Has the code been certified for computational reproducibility? (e.g. Code Ocean's verification process)
         questions:
          - No certification
          - Preparing for certification
          - In-house certified
          - Externally certified
       - name: Reproducibile Build
         path: reproducibile_build
         description: Does the software have a reproducible build?
         questions:
          - Not assessed
          - Public package manager used in build
          - Controlled build environment used
          - Yes

    - name: Other Assessments
      path: other_assessments
      description: Other assessments that may have been undertaken for the software project.
      items:
       - name: OpenSSF Badge
         path: other_openssf
         description: Does the software have an [Open Source Security Foundation (OpenSSF) Best Practices badge](https://bestpractices.coreinfrastructure.org/en/criteria)? If so, which one? 
         questions:
          - Assessment has not been undertaken
          - Passing badge
          - Silver badge
          - Gold badge
       - name: Software Journal
         path: other_journal
         description: Has the software been published in a software journal?
         questions:
          - Has not been published
          - Under review
          - Published
          - Published in more than one journal
       - name: Software Sustainability Institute
         path: other_ssi
         description: Has the software undertaken the Software Sustainability Institute's online [sustainability evaluation](https://www.software.ac.uk/resources/online-sustainability-evaluation)?
         questions:
          - Has not been assessed
          - Have plans to undertake assessment
          - An assessment has been completed
          - Assessment is done on a continual basis
       - name: ACM Artifact Badge
         path: other_acm
         description: Does the software have an [ACM Artifact badge](https://www.acm.org/publications/policies/artifact-review-and-badging-current)?
         questions:
          - Has not been assessed
          - Artifacts Evaluated
          - Artifacts Available
          - Artifacts Reproduced/Replicated
       - name: E4S Membership Criteria
         path: other_e4s
         description: Does the software conform to the E4S Membership Criteria?
         questions:
          - Has not been assessed
          - Conforms to some of the criteria
          - Conforms to all of the published critera
          - Conforms to all published and some future criteria
